<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[CentOS 7 部署 Sentry]]></title>
      <url>https://suuzee.github.io/2019/05/14/CentOS-7-%E9%83%A8%E7%BD%B2-Sentry/</url>
      <content type="html"><![CDATA[<p>由于工作需要，需要部署一套<code>Sentry</code>环境用来统计前端的报错，遇到了很多坑，将部署的正确姿势记录下来，留作备份。<a id="more"></a></p>
<h2 id="更新yum源"><a href="#更新yum源" class="headerlink" title="更新yum源"></a>更新yum源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 备份</span></span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"><span class="comment"># 2. 添加</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"><span class="comment"># 3.生成缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h2 id="Docker相关"><a href="#Docker相关" class="headerlink" title="Docker相关"></a>Docker相关</h2><h3 id="docker-ce"><a href="#docker-ce" class="headerlink" title="docker-ce"></a>docker-ce</h3><h4 id="卸载旧版Docker"><a href="#卸载旧版Docker" class="headerlink" title="卸载旧版Docker"></a>卸载旧版Docker</h4><p>因为我装了一个比较低版本的docker，所以要先卸载<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yum list installed | grep docker </span><br><span class="line"></span><br><span class="line"><span class="comment">## remove掉列出来的docker相关</span></span><br><span class="line">$ yum remove [docker]</span><br></pre></td></tr></table></figure></p>
<h4 id="安装最新版Docker"><a href="#安装最新版Docker" class="headerlink" title="安装最新版Docker"></a>安装最新版Docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://get.docker.com/ | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># centos 7</span></span><br><span class="line">$ systemctl restart docker <span class="comment"># 启动服务</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> docker <span class="comment"># 开机启动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># centos 6</span></span><br><span class="line">$ service docker restart <span class="comment"># 启动服务</span></span><br><span class="line">$ chkconfig docker on <span class="comment"># 开机启动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安Docker版本</span></span><br><span class="line">$ docker version <span class="comment"># docker -v</span></span><br></pre></td></tr></table></figure>
<h4 id="安装Docker-compose"><a href="#安装Docker-compose" class="headerlink" title="安装Docker-compose"></a>安装Docker-compose</h4><blockquote>
<p><a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">https://github.com/docker/compose/releases</a></p>
</blockquote>
<p>去这个链接找到最新的安装脚本，比如</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>
<h2 id="Sentry-相关"><a href="#Sentry-相关" class="headerlink" title="Sentry 相关"></a>Sentry 相关</h2><h3 id="clone代码"><a href="#clone代码" class="headerlink" title="clone代码"></a><code>clone</code>代码</h3><blockquote>
<p><a href="https://github.com/getsentry/onpremise" target="_blank" rel="noopener">https://github.com/getsentry/onpremise</a></p>
</blockquote>
<h3 id="部署Sentry"><a href="#部署Sentry" class="headerlink" title="部署Sentry"></a>部署<code>Sentry</code></h3><p>按照<code>Up and Running</code>步骤来</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建数据卷</span></span><br><span class="line">docker volume create --name=sentry-data &amp;&amp; docker volume create --name=sentry-postgres</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 生成.env</span></span><br><span class="line">cp -n .env.example .env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 构建</span></span><br><span class="line">docker-compose build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 生成secret-key 并且将生成的key加入到.env文件</span></span><br><span class="line">docker-compose run --rm web config generate-secret-key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 运行，这最后可以创建一个超级管理员用户</span></span><br><span class="line">docker-compose run --rm web upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 启动</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 访问</span></span><br><span class="line">localhost:9000</span><br></pre></td></tr></table></figure>
<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><p>创建用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --rm web createuser</span><br></pre></td></tr></table></figure></p>
<p>查看日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose logs web</span><br><span class="line"></span><br><span class="line"><span class="comment">## 实时日志</span></span><br><span class="line">docker-compose logs --tail=<span class="string">"1000"</span> -f web</span><br></pre></td></tr></table></figure></p>
<p>进入容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">exec</span> web bash</span><br></pre></td></tr></table></figure></p>
<h2 id="LDAP-相关"><a href="#LDAP-相关" class="headerlink" title="LDAP 相关"></a><code>LDAP</code> 相关</h2><blockquote>
<p><a href="https://github.com/Banno/getsentry-ldap-auth" target="_blank" rel="noopener">https://github.com/Banno/getsentry-ldap-auth</a></p>
</blockquote>
<h3 id="增加LDAP配置"><a href="#增加LDAP配置" class="headerlink" title="增加LDAP配置"></a>增加<code>LDAP</code>配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###########</span></span><br><span class="line"><span class="comment"># LDAP/AD #</span></span><br><span class="line"><span class="comment">###########</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ldap</span><br><span class="line"><span class="keyword">from</span> django_auth_ldap.config <span class="keyword">import</span> LDAPSearch, GroupOfUniqueNamesType</span><br><span class="line"></span><br><span class="line">AUTH_LDAP_SERVER_URI = <span class="string">'ldap://example'</span></span><br><span class="line">AUTH_LDAP_BIND_DN = <span class="string">'cn=readuser,ou=ex,dc=example,dc=com'</span></span><br><span class="line">AUTH_LDAP_BIND_PASSWORD = <span class="string">'example'</span></span><br><span class="line">OU=unicode(<span class="string">'dc=example,dc=com'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">AUTH_LDAP_USER_SEARCH = LDAPSearch(</span><br><span class="line">    OU,</span><br><span class="line">    ldap.SCOPE_SUBTREE,</span><br><span class="line">    <span class="string">'(cn=%(user)s)'</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">AUTH_LDAP_GROUP_SEARCH = LDAPSearch(</span><br><span class="line">    <span class="string">''</span>,</span><br><span class="line">    ldap.SCOPE_SUBTREE,</span><br><span class="line">    <span class="string">'(objectClass=groupOfUniqueNames)'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">AUTH_LDAP_GROUP_TYPE = GroupOfUniqueNamesType()</span><br><span class="line">AUTH_LDAP_REQUIRE_GROUP = <span class="keyword">None</span></span><br><span class="line">AUTH_LDAP_DENY_GROUP = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">AUTH_LDAP_USER_ATTR_MAP = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'cn'</span>,</span><br><span class="line">    <span class="string">'email'</span>: <span class="string">'email'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AUTH_LDAP_FIND_GROUP_PERMS = <span class="keyword">False</span></span><br><span class="line">AUTH_LDAP_CACHE_GROUPS = <span class="keyword">True</span></span><br><span class="line">AUTH_LDAP_GROUP_CACHE_TIMEOUT = <span class="number">3600</span></span><br><span class="line"></span><br><span class="line">AUTH_LDAP_DEFAULT_SENTRY_ORGANIZATION = <span class="string">u'sentry'</span></span><br><span class="line">AUTH_LDAP_SENTRY_ORGANIZATION_ROLE_TYPE = <span class="string">'member'</span></span><br><span class="line">AUTH_LDAP_SENTRY_ORGANIZATION_GLOBAL_ACCESS = <span class="keyword">True</span></span><br><span class="line">AUTH_LDAP_SENTRY_USERNAME_FIELD = <span class="string">'uid'</span></span><br><span class="line"></span><br><span class="line">AUTHENTICATION_BACKENDS = AUTHENTICATION_BACKENDS + (</span><br><span class="line">    <span class="string">'sentry_ldap_auth.backend.SentryLdapBackend'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><h4 id="更新容器apt源"><a href="#更新容器apt源" class="headerlink" title="更新容器apt源"></a>更新容器<code>apt</code>源</h4><p>进入容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">exec</span> web bash</span><br></pre></td></tr></table></figure></p>
<p>因为容器内很干净，所以安装<code>vim</code>来编辑<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install vim</span><br></pre></td></tr></table></figure></p>
<p>查看<code>Linux</code>版本，可以看出是 <code>Debian 9</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/issue</span><br><span class="line"></span><br><span class="line">Debian GNU/Linux 9 \n \l</span><br></pre></td></tr></table></figure></p>
<p>更新<code>apt</code>源，在<code>/etc/apt/sources.list</code>新增<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/debian stretch main contrib non-free</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian stretch main contrib non-free</span><br><span class="line">deb http://mirrors.aliyun.com/debian stretch-updates main contrib non-free</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian stretch-updates main contrib non-free</span><br><span class="line">deb http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free</span><br></pre></td></tr></table></figure></p>
<p>update<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure></p>
<h4 id="修改Dockerfile"><a href="#修改Dockerfile" class="headerlink" title="修改Dockerfile"></a>修改<code>Dockerfile</code></h4><p>修改<code>Dockerfile</code>文件，在下面加入<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y libsasl2-dev python-dev libldap2-dev libssl-dev</span></span><br><span class="line"><span class="bash">RUN pip install sentry-ldap-auth</span></span><br></pre></td></tr></table></figure></p>
<h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p><code>sentry-ldap-auth</code>作者推荐将插件加入到<code>requirements.txt</code>里面，但是这样会有问题，不要尝试</p>
<h3 id="重启Sentry服务"><a href="#重启Sentry服务" class="headerlink" title="重启Sentry服务"></a>重启<code>Sentry</code>服务</h3><p>分别执行上面<code>3</code>、<code>5</code>、<code>6</code>、<code>7</code>步骤登录的时候就可以用<code>ldap</code>账户登录了，但是登陆进去没有组织</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://www.zengjianfeng.com/2018/07/321.html" target="_blank" rel="noopener">Centos安装最新版Docker CE、Docker-Compose</a></li>
<li><a href="https://www.cnblogs.com/dayfly5/p/10275353.html" target="_blank" rel="noopener">Debian9换源(阿里源)（Linux子系统）</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Sentry </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Docker </tag>
            
            <tag> Sentry </tag>
            
            <tag> LDAP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何通过axios实现一个http请求库（译）]]></title>
      <url>https://suuzee.github.io/2018/08/31/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87Axios%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAhttp%E8%AF%B7%E6%B1%82%E5%BA%93%EF%BC%88%E8%AF%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>最近在<a href="http://www.ruanyifeng.com" target="_blank" rel="noopener">阮一峰</a>的一篇<a href="http://www.ruanyifeng.com/blog/2018/08/weekly-issue-20.html" target="_blank" rel="noopener">每周分享</a>上看到了这篇文章，想翻译（第一次）一下，正好想借此研究一下<code>axios</code>这个大名鼎鼎的库。</p>
<p>原文链接<a href="https://www.tutorialdocs.com/article/axios-learn.html" target="_blank" rel="noopener">https://www.tutorialdocs.com/article/axios-learn.html</a>  <a id="more"></a></p>
<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>在我们做前端开发的时候，经常碰到需要异步请求的情况。当我们用一个强大而齐全的http请求库的话，可以大大降低开发成本，提高开发效率。</p>
<p><code>axios</code>是近几年非常火的一个http请求库。现在<a href="https://github.com/axios/axios" target="_blank" rel="noopener">Github</a>已经有了超过<code>40k</code>的Star，并且被很多前端大牛推荐。</p>
<p>因此，想要通过<code>axios</code>帮助我们实现一个http请求库之前必须要了解它的设计方式。在编写本文时，<code>axios</code>的版本为<code>0.18.0</code>，因此我们以这个版本为例来阅读和分析特定的源代码。<code>axios</code>的当前所有源文件都在<code>lib</code>文件夹中，因此下面的路径都是指<code>lib</code>文件夹的路径。</p>
<p>这里我们主要会谈及：</p>
<ul>
<li>如何使用<code>axios</code></li>
<li><code>axios</code>的核心模块（<code>requests</code>, <code>interceptors</code>, <code>withdrawals</code>）是如何设计实现的？</li>
<li><code>axios</code>的设计有哪些优点？</li>
</ul>
<h3 id="如何使用axios"><a href="#如何使用axios" class="headerlink" title="如何使用axios"></a>如何使用<code>axios</code></h3><p>想要理解<code>axios</code>的设计，我们首先要了解一下如何使用它。让我们用一个简单的例子来了解<code>axios</code>的api。</p>
<h4 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    url:<span class="string">'http://bit.ly/2mTM3nY'</span>,</span><br><span class="line">    responseType:<span class="string">'stream'</span></span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    response.data.pipe(fs.createWriteStream(<span class="string">'ada_lovelace.jpg'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这是一个官方的例子。从上面的代码上来看<code>axios</code>使用起来非常像<code>jQuery</code>的<code>ajax</code>，并且他们都返回一个<code>Promise</code>来继续下面的操作（在这里也能用成功回调函数，但是还是推荐<code>Promise</code>或者<code>await</code>）。</p>
<p>我不用解释这个简单的例子，我们再来看看怎么添加一个过滤器（<code>filter</code>）。</p>
<h4 id="添加拦截器（interceptors）"><a href="#添加拦截器（interceptors）" class="headerlink" title="添加拦截器（interceptors）"></a>添加拦截器（<code>interceptors</code>）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add a request interceptor. Note that there are 2 functions - one succeeds and one fails, and the reason for this will be explained later.</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// The process before sending the request.</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Request error handling.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a response interceptor.</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Processing for the response data.</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Processing after the response error.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>从上面的代码我们可以看出：在发请求之前，我们能够拦截到<code>config</code>参数，并且可以对这个<code>config</code>进行一些处理；在请求回来之后，我们也可以对返回的数据进行一些通用处理。与此同时，我们也可以对<code>request</code>和<code>response</code>添加失败监听，来处理失败的情况。</p>
<h4 id="取消HTTP请求"><a href="#取消HTTP请求" class="headerlink" title="取消HTTP请求"></a>取消HTTP请求</h4><p>当我们开发搜索相关的模块的时候，我们需要经常发请求去查询。通常情况下，在我们发下一个请求的时候，我们需要把最后的请求给取消掉。因此，取消请求相关的方法也是一个优点。<code>axios</code>取消请求的示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">const</span> source = CancelToken.source();</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</span><br><span class="line">    cancelToken: source.token</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">thrown</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (axios.isCancel(thrown)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Request canceled'</span>, thrown.message);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// handle error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.post(<span class="string">'/user/12345'</span>, &#123;</span><br><span class="line">    name: <span class="string">'new name'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    cancelToken: source.token</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// cancel the request (the message parameter is optional)</span></span><br><span class="line">source.cancel(<span class="string">'Operation canceled by the user.'</span>);</span><br></pre></td></tr></table></figure>
<p>从上面的代码可以看出，<code>axios</code>使用的是基于<code>CancelToken</code>提出的撤销。然而，这个提案已经被撤销，详情请见<a href="https://github.com/tc39/proposal-cancelable-promises" target="_blank" rel="noopener">这里</a>；具体的取消方法的实现会在后面源码分析那部分进行解释。</p>
]]></content>
      
        <categories>
            
            <category> axios </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> axios </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[批量删除远程分支]]></title>
      <url>https://suuzee.github.io/2018/07/26/%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</url>
      <content type="html"><![CDATA[<h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>分支遗留太多了，删除远程没有用的分支。<a id="more"></a></p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>第一个是把所有合并到<code>master</code>过的分支名字都列出来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r --merged master</span><br></pre></td></tr></table></figure>
<p>列出来可能是这样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">origin/branchA</span><br><span class="line">origin/branchB</span><br><span class="line">origin/branchC</span><br></pre></td></tr></table></figure>
<p>列出来之后处理一下，处理成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:branchA :branchB :branchC</span><br></pre></td></tr></table></figure>
<p>这一步可以保留不想删掉的分支</p>
<p>然后执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :branchA :branchB :branchC</span><br></pre></td></tr></table></figure>
<p>本来以为这样就可以了，但是发现并不行，会报错</p>
<blockquote>
<p>error: unable to delete ‘branchB’: remote ref does not exist</p>
</blockquote>
<p>这样这些报错分支删除不了，整个操作也执行失败，这样就需要把报错的分支名去掉，就变成了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :branchA :branchC</span><br></pre></td></tr></table></figure>
<p>但是我的分支太多了，借助一段代码实现删掉错误的分支，首先把要删除的分支，和报错的分支弄成数组，然后在<code>Chrome</code>的控制台执行一下，就能得到过滤掉的数组了，然后再转换成我们想要的格式。</p>
<p>PS: 借助于<code>Command + D</code>来实现；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = b.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    x = b[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = a.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        y = a[j];</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            b.splice(i, <span class="number">1</span>);</span><br><span class="line">            a.splice(j, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样执行之后就得到这样的结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">To gitlab.tdc.shangri-la.com:mobile/shangrila_reactNative.git</span><br><span class="line"> - [deleted]           branchA</span><br><span class="line"> - [deleted]           branchC</span><br></pre></td></tr></table></figure></p>
<p>这样很爽</p>
<p>这时执行一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<p>你会发现，这些分支还有，这个时候需要执行一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure>
<p>得到如下结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">URL: git@gitlab.tdc.shangri-la.com:mobile/shangrila_reactNative.git</span><br><span class="line"> * [pruned] origin/branchA</span><br><span class="line"> * [pruned] origin/branchC</span><br></pre></td></tr></table></figure>
<p>这个时候才算真正地清理完成</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 使用技巧 </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://suuzee.github.io/2017/12/22/hello-world/</url>
      <content type="html"><![CDATA[<p><a href="http://www.jianshu.com/p/a52b68794a6b" target="_blank" rel="noopener">搭建以及使用各种特效</a><a id="more"></a></p>
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[🙃]]></title>
      <url>https://suuzee.github.io/2017/07/03/%F0%9F%99%83/</url>
      <content type="html"><![CDATA[<p>谁画出这天地<br>又画出我和你</p>
<p>可是你在哪里<br>可是明天醒来的第一脸阳光<br>能否<br>像昨天一样明亮</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[取个或都是false]]></title>
      <url>https://suuzee.github.io/2017/06/29/%E5%8F%96%E4%B8%AA%E6%88%96%E9%83%BD%E6%98%AFfalse/</url>
      <content type="html"><![CDATA[<p>取个或都是false</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[我被惊艳到了]]></title>
      <url>https://suuzee.github.io/2017/06/27/%E6%88%91%E8%A2%AB%E6%83%8A%E8%89%B3%E5%88%B0%E4%BA%86/</url>
      <content type="html"><![CDATA[<p>听一首很久以前就听过的歌，被惊艳到了，爽呆，之前听咋没发现呢，可能是最近败了耳机的原因吧😎。<a id="more"></a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=167957&auto=1&height=66"></iframe>

<p>《旅行》，2005年留声十年，演唱会版，说实话，这场Live我最喜欢的是《故乡》，木琴前奏实在是好听，虽然前面的有点太长了，也是在看这场Live视频，听说了鼓三儿。</p>
<p>偶然间在地铁里听到随机播放的这首歌，开始的时候没太在意，但是听到”4:25”左右，当所有人以为这首歌结束的了时候，感觉灯光已经熄了，这个时候鼓点响了，接着李延亮的solo，加上童声的和声，感觉灯光一下子就亮了，这感觉就像，你吃了一块肉，吃完了，卧槽太好吃了，感觉此生无憾了，这个时候再给你一块，你是什么心情啊哈哈哈。</p>
<p>从”4:25”左右的1分钟，我循环了N次。</p>
<p>其实这种感觉并不是第一次感受到，之前听到《You Raise Me Up》的一个Live版也是这种感觉，当以为要结束的时候，掌声都要停了，结果solo起来了，当时觉得爽，但是没感觉这么爽。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=29809895&auto=0&height=66"></iframe>

<p>其实仔细回想，这种感觉早就有了，那就是《翅膀》，是我们一直非常执着的歌，排的第二首歌，可以说每次演出必有。导致一些人总会说，你们能不能换首歌，天天翅膀翅膀的…这首歌到后面的时候，是一段贝斯模仿心跳的声音，然后接一段副歌。贝斯声比较低沉，不仔细听是听不到的，所以当野姐姐弹的心跳响起来的时候，大家都以为要结束了，开始喊牛逼了，结果我的solo和婷姐姐一起起来了。描述不好了，反正也是这种感觉，但是就是没有《旅行》这么爽。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=394729&auto=0&height=66"></iframe>

<p>哎，最喜欢最初的那个版本，可惜下架了。</p>
<p>16年圣诞节，看了指人儿的Live，最后他们五个人聚气，观众合唱《翅膀》的时候，真实有点泪目。指人儿牛逼！钢镚儿牛逼！</p>
]]></content>
      
        <categories>
            
            <category> 我感觉好听的歌 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 歌 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React Native Animated]]></title>
      <url>https://suuzee.github.io/2017/06/26/React-Native-Animated/</url>
      <content type="html"><![CDATA[<p>今天有个需求是展示内容，不完全展示，当点击下拉箭头的时候，才能展示完全内容。展示完全的时候这个下拉箭头会旋转成收回箭头，所以想着能不能用动画来实现一个旋转的过程。说干就干<a id="more"></a></p>
<p>其实逻辑很简单，一共有3种状态：初始化页面的时候，箭头向下，不旋转；点开内容看全部的时候，箭头应该向上，旋转180deg；收回的时候，箭头向下，旋转回0deg。</p>
<p>直接上代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; View, Text, StyleSheet, TouchableWithoutFeedback, Animated, Easing &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// xxx</span></span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            <span class="comment">// xxx</span></span><br><span class="line">            moreIconRotateConfig: [<span class="string">'0deg'</span>, <span class="string">'180deg'</span>],   <span class="comment">// 给outputRange一个初始值</span></span><br><span class="line">            moreIconRotateValue: <span class="keyword">new</span> Animated.Value(<span class="number">0</span>)   <span class="comment">// 给动画一个初始值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loadMore () &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; moreIconRotateValue, isFullTextShow &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">let</span> moreIconRotateConfig = [<span class="string">'0deg'</span>, <span class="string">'180deg'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保证每次执行动画都是从0开始</span></span><br><span class="line">        moreIconRotateValue.setValue(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始执行动画。如果要循环的话，就在start 里面写回调，执行本身开始递归。</span></span><br><span class="line">        Animated.timing(moreIconRotateValue, &#123;</span><br><span class="line">            toValue: <span class="number">1</span>,</span><br><span class="line">            duration: <span class="number">200</span>,</span><br><span class="line">            easing: Easing.linear</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 两种状态，如果没有</span></span><br><span class="line">        <span class="keyword">if</span> (isFullTextShow) &#123;</span><br><span class="line">            moreIconRotateConfig = [<span class="string">'180deg'</span>, <span class="string">'0deg'</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        isFullTextShow = !isFullTextShow;</span><br><span class="line">        <span class="keyword">this</span>.setState(<span class="function"><span class="params">()</span> =&gt;</span> (&#123; isFullTextShow, moreIconRotateConfig &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount () &#123;</span><br><span class="line">        <span class="comment">// 当页面初始化的时候，什么也没点，箭头应该是向下的，也就是一点没旋转</span></span><br><span class="line">        <span class="keyword">this</span>.setState(<span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">moreIconRotateConfig</span>: [<span class="string">'0deg'</span>, <span class="string">'180deg'</span>]&#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">        <span class="comment">// xxx</span></span><br><span class="line">        <span class="keyword">const</span> &#123; moreIconRotateValue, moreIconRotateConfig &#125; = <span class="keyword">this</span>.state;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// inputRange 和 outputRange 是一一对应的关系， 0 相当于 0%， 1 相当于100%，也就是说执行到0的时候是0deg，执行到100%的时候就是180deg了。</span></span><br><span class="line">        <span class="keyword">const</span> rotate = moreIconRotateValue.interpolate(&#123;</span><br><span class="line">            inputRange: [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">            outputRange: moreIconRotateConfig</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">                &#123;<span class="comment">/* xxx */</span>&#125;</span><br><span class="line">                &lt;TouchableWithoutFeedback onPress=&#123;<span class="keyword">this</span>.loadMore.bind(<span class="keyword">this</span>)&#125;&gt;</span><br><span class="line">                    &#123;<span class="comment">/* 必须有个View来包裹 */</span>&#125;</span><br><span class="line">                    &lt;View&gt;</span><br><span class="line">                        &#123;<span class="comment">/* xxx */</span>&#125;</span><br><span class="line">                        &lt;View style=&#123;styles.more&#125;&gt;</span><br><span class="line">                            &lt;Animated.View</span><br><span class="line">                                &#123;<span class="comment">/* 这个style里的transform就是要旋转的对象 */</span>&#125;</span><br><span class="line">                                style=&#123;&#123;</span><br><span class="line">                                    transform: [&#123; rotate &#125;]</span><br><span class="line">                                &#125;&#125;&gt;</span><br><span class="line">                                &lt;Icon</span><br><span class="line">                                    code=<span class="string">"e049"</span></span><br><span class="line">                                    color=<span class="string">"#b49150"</span></span><br><span class="line">                                    size=&#123;<span class="number">22</span>&#125;</span><br><span class="line">                                /&gt;</span><br><span class="line">                            &lt;<span class="regexp">/Animated.View&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;/</span>View&gt;</span><br><span class="line">                    &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>TouchableWithoutFeedback&gt;</span><br><span class="line">            &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>还是读书少啊，也踩了很多坑。最开始的时候还把初始化啥的放在<code>render</code>里面写，完全傻逼的行为啊。以后碰到初始化的时候就应该放到生命周期里面写。因为每次改变<code>state</code>的时候，都会执行<code>render</code>，导致死循环了。。</p>
<p>这次还用到了<code>ScrollView</code>，看文档挺多内容的，但是我啥都没写啊，只包了一个标签就好使了，这次先不写了，等有时间研究再写吧。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.jianshu.com/p/b3cfc6b0c33f" target="_blank" rel="noopener">React Native图像变换 Transforms详解</a><br><a href="http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8Banimated%E5%8A%A8%E7%94%BB%E5%BA%93%E8%AF%A6%E8%A7%A3-%E5%9F%BA%E7%A1%80%E7%AF%8764/" target="_blank" rel="noopener">【React Native开发】React Native进阶之Animated动画库详解-基础篇(64)</a><br><a href="http://blog.csdn.net/hello_hwc/article/details/51775696" target="_blank" rel="noopener">React Native开发之动画(Animations)</a><br><a href="https://segmentfault.com/a/1190000007621628" target="_blank" rel="noopener">【译】详解React Native动画</a><br><a href="http://www.alloyteam.com/2016/01/reactnative-animated/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">ReactNative Animated动画详解</a></p>
]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> React </tag>
            
            <tag> Animated </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[涵盖三大系统指型：电吉他音阶系统练习]]></title>
      <url>https://suuzee.github.io/2017/06/25/%E6%B6%B5%E7%9B%96%E4%B8%89%E5%A4%A7%E7%B3%BB%E7%BB%9F%E6%8C%87%E5%9E%8B%EF%BC%9A%E7%94%B5%E5%90%89%E4%BB%96%E9%9F%B3%E9%98%B6%E7%B3%BB%E7%BB%9F%E7%BB%83%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>最近经历的事情比较多，有好事有坏事，没有可比性，但是总体还是稍微郁闷偏多一点吧。现在周末也没啥干的了，看着立在桌子旁边的已经落灰的吉他，突然想再练练了。大学的时候是为了乐队而练吉他，落下了很多基本功，所以想恶补这一块。之前一直是练爬格子，现在想把音阶的东西加进去，找到了这个文章，觉得很好，再总结一下。<a id="more"></a></p>
<p>东西是很好，但是没啥时间练，好尴尬😂</p>
<p>以下内容转自<a href="https://bbs.guitarchina.com/thread-1615860-1-1.html" target="_blank" rel="noopener">https://bbs.guitarchina.com/thread-1615860-1-1.html</a></p>
<h2 id="音阶系统练习"><a href="#音阶系统练习" class="headerlink" title="音阶系统练习"></a>音阶系统练习</h2><h4 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h4><p><code>『音阶系统』</code>一次涵盖三大系统指型，非常基础。  </p>
<p>PS: 使用节拍器，4/4拍，16分音符四连音；</p>
<p>使用Alternative Picking弹奏方式，四连音第一音必须加重音<a href="https://bbs.guitarchina.com/thread-1216849-1-1.html" target="_blank" rel="noopener">https://bbs.guitarchina.com/thread-1216849-1-1.html</a>；</p>
<p>弹奏时需要紧盯指板，并记住每个指型<code>C(Do)</code>在指板上的位置；</p>
<h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h4><p><code>眼到</code>、<code>耳到</code>、<code>心到</code>、<code>口到</code></p>
<h4 id="音阶系统"><a href="#音阶系统" class="headerlink" title="音阶系统"></a>音阶系统</h4><h5 id="五大指型"><a href="#五大指型" class="headerlink" title="五大指型"></a>五大指型</h5><p>五大指型我想是大家再熟悉不过的了，基本上大部份的书籍都围绕在这五大型上面，美国MI的教材里面基本上是以这五大Pattern作为基础的，但是最重要的是依照上面所提的练习要点练习。<br><img src="/2017/06/25/涵盖三大系统指型：电吉他音阶系统练习/1E&amp;G.jpg" alt="五大指型E&amp;G"><br><img src="/2017/06/25/涵盖三大系统指型：电吉他音阶系统练习/1A&amp;B.jpg" alt="五大指型A&amp;B"><br><img src="/2017/06/25/涵盖三大系统指型：电吉他音阶系统练习/1D&amp;E.jpg" alt="五大指型D&amp;E"></p>
<h5 id="三音系统"><a href="#三音系统" class="headerlink" title="三音系统"></a>三音系统</h5><p>这 个系统顾名思义在顺阶音阶弹奏时，每条弦都是三个音，这个弹奏方式比较常见在习惯以<code>Sweep Picking</code>弹奏方式的乐手当中，例如Yngwei Malmsteen,Frank Gambale…等 但是小弟这边仍然建议先把<code>Alternative Picking</code>先练好再去练习<code>Sweep Picking</code><br><img src="/2017/06/25/涵盖三大系统指型：电吉他音阶系统练习/2F&amp;G.jpg" alt="三音系统F&amp;G"><br><img src="/2017/06/25/涵盖三大系统指型：电吉他音阶系统练习/2A&amp;B.jpg" alt="三音系统A&amp;B"><br><img src="/2017/06/25/涵盖三大系统指型：电吉他音阶系统练习/2C&amp;D.jpg" alt="三音系统C&amp;D"><br><img src="/2017/06/25/涵盖三大系统指型：电吉他音阶系统练习/2E.jpg" alt="三音系统E"></p>
<h5 id="单把位系统"><a href="#单把位系统" class="headerlink" title="单把位系统"></a>单把位系统</h5><p>这个系统基本是以每五品为一个把位，例如以下的指型，这个指型的范围就仅在一到五品之间，B指型就会刚好与系统一的B指型一样，因为都在七品到十品之间，所 以在单把位系统当中就不另外列出来了，这个只行在Berklee教材当中出现的比较多，许多爵士乐手或是古典乐手比较常用这样的一个音阶运行方式。</p>
<p><img src="/2017/06/25/涵盖三大系统指型：电吉他音阶系统练习/3F&amp;G.jpg" alt="单把位系统F&amp;G"><br><img src="/2017/06/25/涵盖三大系统指型：电吉他音阶系统练习/3A&amp;C.jpg" alt="单把位系统A&amp;C"><br><img src="/2017/06/25/涵盖三大系统指型：电吉他音阶系统练习/3D.jpg" alt="单把位系统D"></p>
<h5 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h5><p>大家练熟以上三个系统后，就让我们来看如何将他们连在一起演奏，我个人平常在热手以及日常练习时都会演奏它们，在速度120的情况下连续演奏三至五次。</p>
<p><img src="/2017/06/25/涵盖三大系统指型：电吉他音阶系统练习/Total.jpg" alt="综合练习"></p>
]]></content>
      
        
        <tags>
            
            <tag> 吉他 </tag>
            
            <tag> 音阶 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[这个夏天]]></title>
      <url>https://suuzee.github.io/2017/06/25/%E8%BF%99%E4%B8%AA%E5%A4%8F%E5%A4%A9/</url>
      <content type="html"><![CDATA[<blockquote>
<p>I/O版本的《山阴路的夏天》尾奏简直牛逼，小提琴也牛逼。<br><a id="more"></a></p>
</blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=30967317&auto=1&height=66"></iframe>

<p>其实这个夏天也没有那么糟，换了一份工作，还是很感谢Q的人，因为确实学到了很多实实在在的东西；<br>从当初刚来实习的时候的懵懵懂懂，到现在了解到比较前沿的东西，虽然我说不出来，但是还是在心里感受到了；<br>在Q遇到了很好的小伙伴，什么事都可以说，什么事都可以一起探讨，在这个如此艰难的社会，还是感觉挺温暖；<br>在Q也遇到了好的同事们，被灌输了很多工作之外的知识，比如金福的买房理念，哈哈哈。<br>愿你们一切都好，加油；💪</p>
<p>新的同事也都非常Nice，新的环境，愿我能有新的状态。干吧</p>
<blockquote>
<p>这次你离开了<br>没有像以前那样说再见<br>再见也他妈的只是再见<br>我们之间从来<br>没有想象的那么接近<br>只是两棵树的距离<br>你是否还记得<br>山阴路我八楼的房间<br>房间里唱歌的日日夜夜<br>那么热的夏天你看着外面<br>看着你在消逝的容颜<br>我多么想念你走在我身边的样子<br>想起来我的爱就不能停止<br>南京的雨不停地下不停地下<br>就像你沉默的委屈<br>一转眼我们的城市又到了夏天<br>对面走来的人都眯着眼<br>人们不敢说话不敢停下脚步<br>因为心动常常带来危险<br>我多么想念你走在我身边的样子<br>想起来我的爱就不能停止<br>南京的雨不停地下不停地下<br>有些人却注定要相遇<br>你是一片光荣的叶子<br>落在我卑贱的心<br>像往常一样我为自己生气并且唱歌<br>那么乏力<br>爱也吹不动的叶子</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 我感觉好听的歌 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 歌 </tag>
            
            <tag> 李志 </tag>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React Native StatusBar]]></title>
      <url>https://suuzee.github.io/2017/06/25/React-Native-StatusBar/</url>
      <content type="html"><![CDATA[<h2 id="StatusBar"><a href="#StatusBar" class="headerlink" title="StatusBar"></a><code>StatusBar</code></h2><p><code>StatusBar</code>就是手机上面的状态栏，一般显示网速的信号，电量啥的那个。<br><code>StatusBar</code>是可以设置颜色，显示与否啥的<a id="more"></a></p>
<h4 id="barStyle"><a href="#barStyle" class="headerlink" title="barStyle"></a><code>barStyle</code></h4><p>字体颜色可以通过<code>barStyle</code>属性来设置，一般就是亮色(<code>light-content</code>)和暗色(<code>dark-content</code>)。<code>IOS</code>还可以单独设置两个属性，一个是<code>networkActivityIndicatorVisible</code>,是代表有网络请求的时候状态栏是否显示转的<code>菊花</code>，另一个是<code>showHideTransition</code>切换显示隐藏状态栏的时候是否有动画(<code>fade</code>、<code>slide</code>)</p>
<h4 id="translucent"><a href="#translucent" class="headerlink" title="translucent"></a><code>translucent</code></h4><p>指定状态栏是否透明。设置为true时，应用会在状态栏之下绘制（即所谓“沉浸式”——被状态栏遮住一部分）。常和带有半透明背景色的状态栏搭配使用。</p>
<p>等等，我理解的沉浸式不就是<code>App</code>的<code>header</code>是啥颜色，状态栏就是啥颜色就行了吗？还得好好理解一下。<a href="https://www.zhihu.com/question/27040217" target="_blank" rel="noopener">为什么在国内会有很多用户把「透明栏」（Translucent Bars）称作 「沉浸式顶栏」？</a></p>
<h4 id="backgroundColor"><a href="#backgroundColor" class="headerlink" title="backgroundColor"></a><code>backgroundColor</code></h4><p><code>Android</code>特有的，顾名思义，可以设置状态栏的背景颜色，这个是我喜欢的，理由同上。<br><code>IOS</code>为啥不需要，因为<code>IOS</code>状态栏是透明的，一般要设置个高度<code>20</code>把这个状态栏让出来，所以颜色一般都是跟<code>App</code>的<code>Header</code>一样，不一样也不好看吧。。</p>
<h4 id="hidden"><a href="#hidden" class="headerlink" title="hidden"></a><code>hidden</code></h4><p>是否显示状态栏</p>
<h4 id="animated"><a href="#animated" class="headerlink" title="animated"></a><code>animated</code></h4><p>指定状态栏的变化是否应以动画形式呈现。目前支持这几种样式：<code>backgroundColor</code>, <code>barStyle</code>和<code>hidden</code>。<br>还没有实际场景用到，用到再说吧</p>
]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> React </tag>
            
            <tag> Redux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React Native 使用 Redux]]></title>
      <url>https://suuzee.github.io/2017/06/22/React-Native-%E4%BD%BF%E7%94%A8-Redux/</url>
      <content type="html"><![CDATA[<h2 id="为什么用"><a href="#为什么用" class="headerlink" title="为什么用"></a>为什么用</h2><p>因为更好的易用性和可维护性，将页面拆分了不同的大大小小组件，同一个页面的各个组件怎么能用同一套数据，一层一层传递显然不靠谱，如果能放到一个地方谁都能取出来用，那该多好，就用了<code>Redux</code><a id="more"></a></p>
<h2 id="正常用"><a href="#正常用" class="headerlink" title="正常用"></a>正常用</h2><p><code>Store</code>: 数据集合，一个应用只有一个<br><code>Action</code>: 必须定义一个类型，可以传递数据给<code>state</code>，例子：从<code>Native</code>端拿到的数据怎么放到<code>Store</code>里面<br><code>Reducer</code>: 纯函数，两个参数：1. state; 2. action  </p>
<p>合并多个<code>reducer</code><br><code>combineReducer</code></p>
<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>正常<code>dispatch</code>一个<code>Action</code>，在这个<code>Action</code>里面去发异步操作，操作前<code>dispatch</code>一个<code>Action</code>，异步操作之后<code>dispatch</code>一个<code>Action</code></p>
<p><code>ActionCreator</code>应该返回一个函数，这个函数有两个参数，一个是<code>dispatch</code>，一个是<code>getState</code>；然后开始的时候<code>dispatch</code>一个<code>Action</code>，接着执行异步操作，操作之后再<code>dispatch</code>一个<code>Action</code>;<br><code>redux-thunk</code>: 能让<code>store.dispatch</code>参数是函数<br><code>redux-promise</code>: <code>AcrionCreator</code>返回一个<code>Primise</code>对象。<br>两个用法：</p>
<ol>
<li><code>ActionCreator</code>返回值是一个<code>Promise</code>对象</li>
<li><code>Action</code>的<code>payload</code>对象是一个<code>Promise</code>对象，需要<code>redux-actions</code>里面的<code>createAction</code>方法，该方法接受两个参数：1. type; 2. promise对象。如果<code>Action</code>是一个<code>Promise</code>对象，它<code>resolve</code>以后的值也是一个<code>Action</code>对象。而如果<code>Action.payload</code>是一个<code>Promise</code>对象，它<code>resolve</code>和<code>reject</code>之后都可以出发<code>Action</code>。</li>
</ol>
<h2 id="React-Reduex"><a href="#React-Reduex" class="headerlink" title="React-Reduex"></a><code>React-Reduex</code></h2><ul>
<li><code>UI</code>组件和容器组件<br><code>UI</code>组件只负责展示，是一个纯组件，只受<code>props</code>影响，可以接受用户操作，发出<code>Action</code>；容器组件处理逻辑，比如将<code>state</code>里面的值转化成<code>UI</code>组件可用的<code>propos</code>属性，包含着<code>UI</code>组件。</li>
<li><code>connect</code>方法<br><code>connect</code>用于从<code>UI组件</code>生成<code>容器组件</code></li>
<li><code>mapStateToProps</code></li>
<li><code>mapDispatchToProps</code></li>
<li><code>&lt;Provider /&gt;</code>组件：能让每个组件都能拿到<code>state</code>，从<code>this.context</code>里面拿</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// connect</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>; </span><br><span class="line"><span class="comment">// UI组件</span></span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">'./List'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 将state的值传给props，返回一个对象，key是props的key，value就是props的value</span></span><br><span class="line">    <span class="comment">// 自动订阅Store，当state更新，会自动更新UI</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是一个函数</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch, ownProps</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 定义用户应该怎么操作触发Action</span></span><br><span class="line">    <span class="comment">// dispatch触发Action</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是一个对象</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps =  &#123;</span><br><span class="line">    <span class="comment">// key是UI组件对应的同名参数</span></span><br><span class="line">    <span class="comment">// value 是一个ActionCreator，满足条件自动发</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">    mapStateToProps,</span><br><span class="line">    mapDispatchToProps</span><br><span class="line">)(List);</span><br><span class="line"></span><br><span class="line"><span class="comment">// connect()(List);这个List就是将List这个UI组件包裹进去。</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> React </tag>
            
            <tag> Redux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React Native 使用自定义Iconfont]]></title>
      <url>https://suuzee.github.io/2017/06/19/React-Native-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="React-Native-使用自定义-iconfont"><a href="#React-Native-使用自定义-iconfont" class="headerlink" title="React Native 使用自定义 iconfont"></a>React Native 使用自定义 iconfont</h2><a id="more"></a>
<ol>
<li>下载字体文件</li>
<li><code>IOS</code> -&gt; 将字体文件拽进<code>xcode</code>工程里，然后在<code>info.plist</code>加入<code>Fonts provided by application</code>，这是个数组，写上<code>fonts/iconfont.ttf</code>.</li>
<li><code>Android</code>: 把字体文件拷贝到<code>[project root]/android/app/src/main/assets/fonts/</code></li>
<li><code>fontFamily: &#39;iconfont&#39;</code> PS: 下载的文件叫什么，<code>fontFamily</code>就是什么。</li>
<li>因为我们的<code>iconfont</code>都是<code>&amp;#xe038;</code>这种格式的，这不是把这些传给<code>Icon</code>组件就行了吗，但是试了之后，会转义成字符串。这可不是我们想要的。</li>
<li>那怎么办，不让他转义是一种方式：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> content=<span class="string">'&lt;strong&gt;content&lt;/strong&gt;'</span>;    </span><br><span class="line"></span><br><span class="line">React.render(</span><br><span class="line">    &lt;div dangerouslySetInnerHTML=&#123;&#123;<span class="attr">__html</span>: content&#125;&#125;&gt;&lt;/div&gt;,</span><br><span class="line">    <span class="built_in">document</span>.body</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>没生效，故弃之。</p>
<ol>
<li>我们用的时候只要用<code>e038</code>就行了，因为<code>e038</code>是个16进制数字，我们要先转换成10进制，再转化回去16进制就行了。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.fromCharCode(<span class="built_in">parseInt</span>(<span class="string">'e038'</span>, <span class="number">16</span>))</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这样就会返回我们要的图标；</p>
]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> React </tag>
            
            <tag> Iconfont </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue-cli构建vue项目]]></title>
      <url>https://suuzee.github.io/2017/06/06/vue-cli%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>公司在用<code>vue + ssr</code>的模式在进行开发，有个登录的需求，直接写在该项目里面了，但是发现登录的需求应该单独搞一个项目，这样可以重复利用；<a id="more"></a></p>
<h4 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h4><ul>
<li>安装node</li>
<li>安装vue-cli</li>
<li><code>vue init webpack</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Vuejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Vue.js </tag>
            
            <tag> vue-cli </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6函数]]></title>
      <url>https://suuzee.github.io/2017/03/09/ES6%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>参考自阮一峰老师的<a href="http://es6.ruanyifeng.com/#docs/function" target="_blank" rel="noopener">ECMAScript 6 入门</a> <a id="more"></a></p>
<h4 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a>函数默认值</h4><p><code>es6</code> 支持为函数参数赋予默认值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logA</span> (<span class="params">a = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">logA(); <span class="comment">// 1</span></span><br><span class="line">logA(<span class="number">3</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>避免了我们类似这样的操作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logA</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    a = a || <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以与解构赋值结合使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">&#123;a, b = <span class="number">4</span>&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line">sum(&#123;<span class="attr">a</span>: <span class="number">4</span>&#125;); <span class="comment">// 8</span></span><br><span class="line">sum(&#123;<span class="attr">a</span>: <span class="number">4</span>, <span class="attr">b</span>: <span class="number">5</span>&#125;); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure></p>
<p>参数默认值的位置一般都放在尾参数，这样的话调用这个函数的时候，就可以省略<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">a = <span class="number">3</span>, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="literal">undefined</span>, <span class="number">5</span>); <span class="comment">// 8</span></span><br><span class="line">sum(<span class="number">5</span>, <span class="literal">undefined</span>); <span class="comment">// NaN</span></span><br><span class="line">sum(<span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 9</span></span><br><span class="line">sum(<span class="number">5</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum2</span> (<span class="params">a, b = <span class="number">5</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line">sum2(<span class="literal">undefined</span>, <span class="number">5</span>); <span class="comment">// NaN</span></span><br><span class="line">sum2(<span class="number">5</span>, <span class="literal">undefined</span>); <span class="comment">// 10</span></span><br><span class="line">sum2(<span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 9</span></span><br><span class="line">sum2(<span class="number">5</span>); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></p>
<p>PS: <code>null</code> 不会触发默认值，<code>undefined</code> 会。</p>
<p>函数的length会返回没有指定参数默认值的参数个数。</p>
<h4 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h4><p>设置rest参数，可以用 <code>for of</code> 遍历。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">...keys</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">of</span> keys) &#123;</span><br><span class="line">        sum += key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure></p>
<p>rest参数还可以代替arguments<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNumbers</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>).sort();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sortNumbers (...numbers) =&gt; numbers.sort();</span><br></pre></td></tr></table></figure></p>
<p>PS: rest参数只能是最后一个参数；函数的length属性不包括rest参数。</p>
<h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><p>扩展运算符就想rest参数的逆运算，可以将一个数组分以逗号分隔开。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// 1 2</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ES6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node Stream]]></title>
      <url>https://suuzee.github.io/2017/03/07/node-Stream/</url>
      <content type="html"><![CDATA[<h4 id="Node-中的-Stream"><a href="#Node-中的-Stream" class="headerlink" title="Node 中的 Stream"></a><code>Node</code> 中的 <code>Stream</code></h4><p>Node可以通过读取一个文件内容，再写入到另一个文件里完成复制，但是如果太大的文件（电影啥的）就不太好，于是就引出流的概念，边读边写。<a id="more"></a></p>
<p><a href="https://nodeschool.io/" target="_blank" rel="noopener">https://nodeschool.io/</a><br><a href="https://segmentfault.com/a/1190000000357044" target="_blank" rel="noopener">https://segmentfault.com/a/1190000000357044</a><br><a href="https://segmentfault.com/a/1190000000519006" target="_blank" rel="noopener">https://segmentfault.com/a/1190000000519006</a></p>
]]></content>
      
        <categories>
            
            <category> nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> nodejs </tag>
            
            <tag> stream </tag>
            
            <tag> pipe </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ykit中某些功能]]></title>
      <url>https://suuzee.github.io/2017/03/04/ykit%E4%B8%AD%E6%9F%90%E4%BA%9B%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<p><code>ykit</code>: <a href="http://ued.qunar.com/ykit/" target="_blank" rel="noopener">http://ued.qunar.com/ykit/</a> <a id="more"></a></p>
<h4 id="不同环境可以设置不同的url。目前不支持beta；"><a href="#不同环境可以设置不同的url。目前不支持beta；" class="headerlink" title="不同环境可以设置不同的url。目前不支持beta；"></a>不同环境可以设置不同的url。目前不支持beta；</h4><p>配置：<code>ykit.config.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> envUrls = <span class="built_in">require</span>(<span class="string">'./config/url'</span>);</span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">this</span>.env) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'local'</span>:</span><br><span class="line">        baseConfig.plugins.unshift(<span class="keyword">new</span> <span class="keyword">this</span>.webpack.DefinePlugin(envUrls.local));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'dev'</span>:</span><br><span class="line">        baseConfig.plugins.unshift(<span class="keyword">new</span> <span class="keyword">this</span>.webpack.DefinePlugin(envUrls.dev));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'prd'</span>:</span><br><span class="line">        baseConfig.plugins.unshift(<span class="keyword">new</span> <span class="keyword">this</span>.webpack.DefinePlugin(envUrls.prd));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>urls: <code>./config/url.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urls = &#123;</span><br><span class="line">    card: <span class="string">'/fp/card.jsp'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境url</span></span><br><span class="line"><span class="keyword">let</span> envUrls = &#123;</span><br><span class="line">    local: &#123;</span><br><span class="line">        card: &#123;</span><br><span class="line">            ajaxCardDeleteCardUrl: urls.card + <span class="string">'?mockAction=deleteCard'</span>,</span><br><span class="line">            ajaxCardBindCardViewUrl: urls.card + <span class="string">'?mockAction=bindCardView'</span>,</span><br><span class="line">            ajaxCardBindCardUrl: urls.card + <span class="string">'?mockAction=bindCard'</span>,</span><br><span class="line">            ajaxCardGetCardUrl: urls.card</span><br><span class="line">        &#125;,</span><br><span class="line">        index: &#123;</span><br><span class="line">            ajaxIndexPaySyncUrl: <span class="string">'/wappay/cardinfoinput?mockAction=local'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    dev: &#123;</span><br><span class="line">        card: &#123;</span><br><span class="line">            ajaxCardDeleteCardUrl: urls.card,</span><br><span class="line">            ajaxCardBindCardViewUrl: urls.card,</span><br><span class="line">            ajaxCardBindCardUrl: urls.card,</span><br><span class="line">            ajaxCardGetCardUrl: urls.card</span><br><span class="line">        &#125;,</span><br><span class="line">        index: &#123;</span><br><span class="line">            ajaxIndexPaySyncUrl: <span class="string">'/wappay/cardinfoinput'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    prd: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> local = mergeObject(envUrls.local);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dev = mergeObject(envUrls.dev);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常情况是 let prd = mergeObject(envUrls.prd);</span></span><br><span class="line"><span class="keyword">let</span> prd = dev;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [mergeObject 将对象中的属性合并]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeObject</span> (<span class="params">obj = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.assign(temp, obj[p]);</span><br><span class="line">    &#125;</span><br><span class="line">    temp = stringProperty(temp);</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [stringProperty 将对象属性包裹JSON.stringify，如果不包裹可能会认为属性是一个正则表达式]</span></span><br><span class="line"><span class="comment"> * @param  &#123;Object&#125; obj [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;     [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringProperty</span> (<span class="params">obj = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        obj[p] = <span class="built_in">JSON</span>.stringify(obj[p]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;local, dev, prd&#125;;</span><br></pre></td></tr></table></figure></p>
<p>PS：由于有些url带 <code>/</code> ，所以可能会被解析成一个正则表达式，所以要给url包一层 <code>JSON.stringify</code> .</p>
<h4 id="通过-jerry-实现mock"><a href="#通过-jerry-实现mock" class="headerlink" title="通过 jerry 实现mock"></a>通过 <code>jerry</code> 实现mock</h4><p><code>jerry</code>: <a href="https://github.com/Ellery0924/Jerry" target="_blank" rel="noopener">https://github.com/Ellery0924/Jerry</a></p>
<p>可以通过 <code>jerry</code> 实现mock，并且可以通过一个url，传入不同的参数实现返回不同的 <code>json</code>.在项目根目录创建 <code>mock.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        pattern: <span class="regexp">/\/xxx\/yyy/</span>,</span><br><span class="line">        responder: <span class="built_in">require</span>(<span class="string">'./mock/yyy.js'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        pattern: <span class="regexp">/\/xxx\/zzz/</span>,</span><br><span class="line">        responder: <span class="built_in">require</span>(<span class="string">'./mock/zzz.json'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>responder</code> 支持返回一个方法，支持直接返回一个 <code>json</code> 对象等。</p>
<p><code>responder</code> 返回的方法有两个参数：第一个参数是请求的 <code>url</code> 的解析之后的对象，这个对象就像是 <code>window.location</code> 这个对象。第二个参数是 <code>body</code>，即 <code>response.body</code>，是一个字符串，格式类似于 <code>window.location.search</code>，没有前面的 <code>?</code> .</p>
<p><code>./mock/yyy.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">parserUrl, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> action = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> json = &#123;&#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        action = getAction(parserUrl, data);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (action) &#123;</span><br><span class="line">        <span class="keyword">if</span> (action === <span class="string">'a'</span>) &#123;</span><br><span class="line">            json = aJson;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action === <span class="string">'b'</span>)&#123;</span><br><span class="line">            json =  bJson;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            json = defaultJson;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        json =  defaultJson;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAction</span> (<span class="params">urlObj, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> action = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> actionGet = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> actionPost = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!!urlObj.search) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            actionGet = queryToJson(urlObj.search).action;</span><br><span class="line">            <span class="keyword">if</span> (!!actionGet) &#123;</span><br><span class="line">                action = actionGet;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            actionPost = queryToJson(data).action;</span><br><span class="line">            <span class="keyword">if</span> (actionPost) &#123;</span><br><span class="line">                action = actionPost;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> action;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryToJson</span> (<span class="params">searchString</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = searchString.replace(<span class="regexp">/\?/</span>, <span class="string">''</span>).split(<span class="string">'&amp;'</span>) || [];</span><br><span class="line">    <span class="keyword">var</span> paramObj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = params.length; i &lt; len; i ++) &#123;</span><br><span class="line">        <span class="keyword">var</span> param = params[i].split(<span class="string">'='</span>);</span><br><span class="line">        paramObj[param[<span class="number">0</span>]] = param[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> paramObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> defaultJson = &#123;</span><br><span class="line">    data: <span class="string">'defaultjson'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aJson = &#123;</span><br><span class="line">    data: <span class="string">'ajson'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bJson = &#123;</span><br><span class="line">    data: <span class="string">'bjson'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这种是针对一种场景：请求同一个url，但是请求的参数不同，返回的json也就不同。上述是请求 <code>/xxx/yyy</code>，如果参数中 <code>action</code> 为 <code>a</code>，则返回 <code>aJson</code>，如果参数中 <code>action</code> 为 <code>b</code>，则返回 <code>bJson</code>。</p>
]]></content>
      
        <categories>
            
            <category> ykit </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ykit </tag>
            
            <tag> 编译工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[问题总结]]></title>
      <url>https://suuzee.github.io/2017/02/27/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>汇总一下各种问题，解决方案，碰到问题就会更新。<a id="more"></a></p>
<h2 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a>Grunt</h2><ol>
<li>运行 <code>jshint</code> 出现 <code>Warning: Path must be a string. Received null Use --force to continue.</code>：<br>解决办法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">options: &#123;</span><br><span class="line">    ...</span><br><span class="line">    reporterOutput: <span class="string">""</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><a href="https://github.com/jshint/jshint/issues/2922#ref-issue-154888828" target="_blank" rel="noopener">https://github.com/jshint/jshint/issues/2922#ref-issue-154888828</a></p>
<ol>
<li>运行 <code>imagemin</code> 出现 <code>Warning: Imagemin.pngquant is not a function Use --force to continue.</code>：<br>解决办法：<br>运行 <code>npm install grunt-contrib-imagemin@1.0.1 --save-dev</code>。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 问题汇总 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 问题汇总 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redux]]></title>
      <url>https://suuzee.github.io/2017/02/26/Redux/</url>
      <content type="html"><![CDATA[<p>早就知道 <code>Redux</code> 这个玩意儿，并且看过一些介绍，以及听过一次分享。但是，由于听分享的时候准备的不够充分，导致听不太懂。明天还会有个分享，所以打算看一下，准备准备。之前看的没有做笔记，并且不够专注，这次在这里写入我个人的理解。<a id="more"></a></p>
<p>主要看阮一峰的 <a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="noopener">Redux入门教程</a> 。</p>
<h4 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h4><h5 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h5><blockquote>
<ol>
<li>Web 应用是一个状态机，视图与状态是一一对应的。</li>
<li>所有的状态，保存在一个对象里面。</li>
</ol>
</blockquote>
<h5 id="主要概念"><a href="#主要概念" class="headerlink" title="主要概念"></a>主要概念</h5><ol>
<li><p>Store: 一个只能存在一个的容器，用来保存行为与响应。可以通过 <code>createStore</code> 方法来生成。可以通过 <code>store.subscribe</code> 方法来设置监听函数。 <code>State</code> 发生变化的时候，监听函数自动执行。通过 <code>store.unsubscribe</code> 方法来解绑。</p>
</li>
<li><p>State: 应用的状态，可以通过 <code>store.getState</code> 方法获取当前 <code>State</code> 。</p>
</li>
<li><p>Action: 用户的行为。通过类型来区分，改变 <code>state</code> 。可以通过 <code>store.dispatch</code> 方法发出Action。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> action = &#123;</span><br><span class="line">    type: <span class="string">'ADD_TODO'</span>,</span><br><span class="line">    text: <span class="string">'Learn Redux'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Reducer: 通过 <code>action</code> 以及旧的 <code>state</code> 来生成新的 <code>state</code> 。</p>
</li>
</ol>
<h5 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h5><h5 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h5><p><code>Reducer</code> 可以被拆分出来，通过 <code>combineReducers</code> 方法将几个 <code>reducer</code> 合并。</p>
<h5 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h5><p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091802.jpg" alt=""></p>
<ol>
<li><p>用户触发 <code>Action</code> ；</p>
</li>
<li><p><code>Store</code> 调用 <code>Reducer</code> ，后者返回一个新的 <code>State</code>；</p>
</li>
<li><p><code>State</code> 发生变化，触发监听函数；</p>
</li>
<li><p>监听函数更新 <code>View</code>。</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Redux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Redux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[函数式编程]]></title>
      <url>https://suuzee.github.io/2017/02/26/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h4 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数<a id="more"></a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大多数的纯函数都应该有至少一个参数。</p>
<p>所有的纯函数都应该返回一些东西。</p>
<p>纯函数对于给定的输入，总是产生相同的输出。</p>
<p>纯函数没有函数副作用。</p>
<p>纯函数有可缓存性。</p>
<p>我的理解：纯函数不依赖任何出了传入参数给定的东西。比如外部变量，获取个系统时间之类的，因为输入相同，输出一定要相同。</p>
<h4 id="不可变性"><a href="#不可变性" class="headerlink" title="不可变性"></a>不可变性</h4><p>在函数式编程中没有变量。也就是说即使传入的参数，到了执行的时候也不能被改变。里面任何时候定义的变量也都不能改，被声明时赋值了什么就是什么。</p>
<p>函数式编程通过拷贝处理但只修改。🤔</p>
<p>没有循环，不能用for之类的，用递归。递归不会修改旧值，但是使用了旧值的计算结果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumRange</span> (<span class="params">start, end, acc</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sumRange(start + <span class="number">1</span>, end, acc + start);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sumRange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">0</span>)) <span class="comment">// 55</span></span><br></pre></td></tr></table></figure>
<p>这里函数内部并没有改变参数的值，但是在递归调用的时候可能会对参数值进行重新赋值，这就是使用了旧值的计算结果，但是那是另一个函数了。</p>
<p>不可变性的好处：不可变性创建了更简单安全的代码。🤔</p>
<h4 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h4><p>定义：传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>)(<span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add10 = add(<span class="number">10</span>);</span><br><span class="line">add10(<span class="number">20</span>); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure>
<h4 id="函数组合"><a href="#函数组合" class="headerlink" title="函数组合"></a>函数组合</h4><p>函数组合就是传入几个参数，然后在定义函数组合的函数中执行这几个参数，或者在return的函数中执行这几个参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compose = <span class="function">(<span class="params">f, g</span>) =&gt;</span> (<span class="function"><span class="params">x</span> =&gt;</span> f(g(x)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">compose(foo, bar)(<span class="number">2</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>
<h4 id="Point-Free"><a href="#Point-Free" class="headerlink" title="Point Free"></a>Point Free</h4><h4 id="声明式与命令式代码"><a href="#声明式与命令式代码" class="headerlink" title="声明式与命令式代码"></a>声明式与命令式代码</h4><p>命令式代码就是每一步都是指定去做。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CEOs = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = companies.length; i &lt; len; i ++) &#123;</span><br><span class="line">    CEOs.push(companies[i].CEO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>声明式代码是通过写表达式的方式来声明我们想干什么。声明的是做什么。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CEOs = companies.map(<span class="function"><span class="params">c</span> =&gt;</span> c.CEO);</span><br></pre></td></tr></table></figure>
<h4 id="容器、Functor"><a href="#容器、Functor" class="headerlink" title="容器、Functor"></a>容器、Functor</h4><p>容器就是讲给定的值包裹起来，可能还有其他的一些作用。比如说衣服将人包裹起来，还有保暖，遮体的作用，脱掉了衣服人还是人。</p>
<p>例子能看明白怎么实现，但是不是很理解：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Container = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.__value = x;</span><br><span class="line">&#125;</span><br><span class="line">Container.of = <span class="function"><span class="params">x</span> =&gt;</span> <span class="keyword">new</span> Container(x);</span><br><span class="line">Container.prototype.map = <span class="function"><span class="params">f</span> =&gt;</span> Container.of(f(<span class="keyword">this</span>.__value));</span><br><span class="line"></span><br><span class="line">Container.of(<span class="number">3</span>)</span><br><span class="line">    .map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>) <span class="comment">// Container(4)</span></span><br><span class="line">    .map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="string">'Result is '</span> + x); <span class="comment">// Container('Result is 4')</span></span><br></pre></td></tr></table></figure></p>
<p>执行的时候感觉有问题，每次调用 <code>Container.of</code> 的时候，都是返回一个新的Container对象，这几个对象不是一个。也就是说上面的链式调用每个都是一个新的 <code>Container</code> ，而map中用到的 <code>this.__value</code> 就是 <code>undefined</code> 了。</p>
]]></content>
      
        <categories>
            
            <category> 函数式编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高性能JavaScript读书笔记（二）]]></title>
      <url>https://suuzee.github.io/2017/02/06/%E9%AB%98%E6%80%A7%E8%83%BDJavaScript%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>读《高性能JavaScript》的时候的一些理解<br><a id="more"></a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=394729&auto=0&height=66"></iframe>

<h3 id="第二章-数据存取"><a href="#第二章-数据存取" class="headerlink" title="第二章 数据存取"></a>第二章 数据存取</h3><p>执行函数的时候会创建一个被称为执行环境的内部对象。一个执行环境定义了一个一个函数执行时的环境，函数每次执行时，对应的执行环境都是独一无二的，也就是说每次调用这个函数都会创建不同的执行环境。函数执行完毕，执行环境就销毁。</p>
<p>每个执行环境都有自己的作用域链，用来解析标识符（我的理解是变量）。执行函数的时候会有个搜索标识符的过程，这个过程会影响性能。而搜索变量的时候，会从作用域链一层层往上找，找到就用，找不到就接着找。所以越近的变量搜索过程越短，性能损失越小。所以要尽可能地缓存全局变量，来减少损耗。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> doc = <span class="built_in">document</span>,</span><br><span class="line">        oDiv1 = doc.getElementById(<span class="string">'div1'</span>);</span><br><span class="line">    oDiv1.style.backgroundColor = <span class="string">'#000'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>with</code> 语句可以把全局变量置于作用域链的头部，但是这是创建了一个新的作用域链，虽然全局变量好找了，但是局部变量却不好找了，更浪费性能。所以不推荐用with语句。</p>
<p><code>try-catch</code> 中的 <code>catch</code> 也可以改变作用域链，所有的局部变量会被放到新的作用域链里面，这样也会影响性能。 <code>try-catch</code> 语句可以适当使用，来避免不可预知的错误。建议在 <code>catch</code> 中处理错误通过调用函数的方式，这样不访问局部变量就会不会影响性能。</p>
<h4 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h4><p><code>with</code> 、 <code>try-catch</code> 中 <code>catch</code> 子句、 <code>eval()</code> 都是动态作用域。</p>
<p>动态作用域只存在函数执行过程中，不建议使用动态作用域，因为可能会改变变量的值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">excute</span> (<span class="params">code</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">eval</span>(code);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> w = <span class="built_in">window</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果code是'var window = &#123;&#125;'，w 就不是真正的window了。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="闭包、作用域和内存"><a href="#闭包、作用域和内存" class="headerlink" title="闭包、作用域和内存"></a>闭包、作用域和内存</h4><p>使用闭包时，闭包的 <code>[[Scope]]</code> 包含于执行环境作用域链相同的对象的引用，通常来说这些活动对象会随着执行环境销毁而销毁，但是闭包就不会。<br>使用闭包时要注意：频繁访问跨作用域的标识符时，每次都会带来性能损失。</p>
<h4 id="对象成员"><a href="#对象成员" class="headerlink" title="对象成员"></a>对象成员</h4>]]></content>
      
        <categories>
            
            <category> 高性能JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 高性能JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高性能JavaScript读书笔记（一）]]></title>
      <url>https://suuzee.github.io/2017/02/06/%E9%AB%98%E6%80%A7%E8%83%BDJavaScript%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>读《高性能JavaScript》的时候的一些理解<a id="more"></a></p>
<h4 id="第一章-加载和执行"><a href="#第一章-加载和执行" class="headerlink" title="第一章 加载和执行"></a>第一章 加载和执行</h4><p>占位</p>
]]></content>
      
        <categories>
            
            <category> 高性能JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 高性能JavaScript </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
